"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ra-data-simple-rest";
exports.ids = ["vendor-chunks/ra-data-simple-rest"];
exports.modules = {

/***/ "(ssr)/./node_modules/ra-data-simple-rest/dist/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/ra-data-simple-rest/dist/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\n/* harmony import */ var ra_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ra-core */ \"(ssr)/./node_modules/ra-core/dist/esm/dataProvider/fetch.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n/**\n * Maps react-admin queries to a simple REST API\n *\n * This REST dialect is similar to the one of FakeRest\n *\n * @see https://github.com/marmelab/FakeRest\n *\n * @example\n *\n * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * getOne      => GET http://my.api.url/posts/123\n * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}\n * update      => PUT http://my.api.url/posts/123\n * create      => POST http://my.api.url/posts\n * delete      => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import simpleRestProvider from 'ra-data-simple-rest';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (apiUrl, httpClient, countHeader) {\n    if (httpClient === void 0) { httpClient = ra_core__WEBPACK_IMPORTED_MODULE_1__.fetchJson; }\n    if (countHeader === void 0) { countHeader = 'Content-Range'; }\n    return ({\n        getList: function (resource, params) {\n            var _a = params.pagination, page = _a.page, perPage = _a.perPage;\n            var _b = params.sort, field = _b.field, order = _b.order;\n            var rangeStart = (page - 1) * perPage;\n            var rangeEnd = page * perPage - 1;\n            var query = {\n                sort: JSON.stringify([field, order]),\n                range: JSON.stringify([rangeStart, rangeEnd]),\n                filter: JSON.stringify(params.filter),\n            };\n            var url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat((0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(query));\n            var options = countHeader === 'Content-Range'\n                ? {\n                    // Chrome doesn't return `Content-Range` header if no `Range` is provided in the request.\n                    headers: new Headers({\n                        Range: \"\".concat(resource, \"=\").concat(rangeStart, \"-\").concat(rangeEnd),\n                    }),\n                }\n                : {};\n            return httpClient(url, options).then(function (_a) {\n                var headers = _a.headers, json = _a.json;\n                if (!headers.has(countHeader)) {\n                    throw new Error(\"The \".concat(countHeader, \" header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare \").concat(countHeader, \" in the Access-Control-Expose-Headers header?\"));\n                }\n                return {\n                    data: json,\n                    total: countHeader === 'Content-Range'\n                        ? parseInt(headers.get('content-range').split('/').pop(), 10)\n                        : parseInt(headers.get(countHeader.toLowerCase())),\n                };\n            });\n        },\n        getOne: function (resource, params) {\n            return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id)).then(function (_a) {\n                var json = _a.json;\n                return ({\n                    data: json,\n                });\n            });\n        },\n        getMany: function (resource, params) {\n            var query = {\n                filter: JSON.stringify({ id: params.ids }),\n            };\n            var url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat((0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(query));\n            return httpClient(url).then(function (_a) {\n                var json = _a.json;\n                return ({ data: json });\n            });\n        },\n        getManyReference: function (resource, params) {\n            var _a;\n            var _b = params.pagination, page = _b.page, perPage = _b.perPage;\n            var _c = params.sort, field = _c.field, order = _c.order;\n            var rangeStart = (page - 1) * perPage;\n            var rangeEnd = page * perPage - 1;\n            var query = {\n                sort: JSON.stringify([field, order]),\n                range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n                filter: JSON.stringify(__assign(__assign({}, params.filter), (_a = {}, _a[params.target] = params.id, _a))),\n            };\n            var url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat((0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(query));\n            var options = countHeader === 'Content-Range'\n                ? {\n                    // Chrome doesn't return `Content-Range` header if no `Range` is provided in the request.\n                    headers: new Headers({\n                        Range: \"\".concat(resource, \"=\").concat(rangeStart, \"-\").concat(rangeEnd),\n                    }),\n                }\n                : {};\n            return httpClient(url, options).then(function (_a) {\n                var headers = _a.headers, json = _a.json;\n                if (!headers.has(countHeader)) {\n                    throw new Error(\"The \".concat(countHeader, \" header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare \").concat(countHeader, \" in the Access-Control-Expose-Headers header?\"));\n                }\n                return {\n                    data: json,\n                    total: countHeader === 'Content-Range'\n                        ? parseInt(headers.get('content-range').split('/').pop(), 10)\n                        : parseInt(headers.get(countHeader.toLowerCase())),\n                };\n            });\n        },\n        update: function (resource, params) {\n            return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id), {\n                method: 'PUT',\n                body: JSON.stringify(params.data),\n            }).then(function (_a) {\n                var json = _a.json;\n                return ({ data: json });\n            });\n        },\n        // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n        updateMany: function (resource, params) {\n            return Promise.all(params.ids.map(function (id) {\n                return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n                    method: 'PUT',\n                    body: JSON.stringify(params.data),\n                });\n            })).then(function (responses) { return ({ data: responses.map(function (_a) {\n                    var json = _a.json;\n                    return json.id;\n                }) }); });\n        },\n        create: function (resource, params) {\n            return httpClient(\"\".concat(apiUrl, \"/\").concat(resource), {\n                method: 'POST',\n                body: JSON.stringify(params.data),\n            }).then(function (_a) {\n                var json = _a.json;\n                return ({ data: json });\n            });\n        },\n        delete: function (resource, params) {\n            return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id), {\n                method: 'DELETE',\n                headers: new Headers({\n                    'Content-Type': 'text/plain',\n                }),\n            }).then(function (_a) {\n                var json = _a.json;\n                return ({ data: json });\n            });\n        },\n        // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n        deleteMany: function (resource, params) {\n            return Promise.all(params.ids.map(function (id) {\n                return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n                    method: 'DELETE',\n                    headers: new Headers({\n                        'Content-Type': 'text/plain',\n                    }),\n                });\n            })).then(function (responses) { return ({\n                data: responses.map(function (_a) {\n                    var json = _a.json;\n                    return json.id;\n                }),\n            }); });\n        },\n    });\n});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ra-data-simple-rest/dist/esm/index.js\n");

/***/ })

};
;